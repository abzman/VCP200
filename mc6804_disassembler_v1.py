# -*- coding: utf-8 -*-
"""
Created on Tues Sep 29 2020

@author: abzman
"""
import binascii


switcher = {
	'00': "BNE PC+00",
	'01': "BNE PC+01",
	'02': "BNE PC+02",
	'03': "BNE PC+03",
	'04': "BNE PC+04",
	'05': "BNE PC+05",
	'06': "BNE PC+06",
	'07': "BNE PC+07",
	'08': "BNE PC+08",
	'09': "BNE PC+09",
	'0a': "BNE PC+0a",
	'0b': "BNE PC+0b",
	'0c': "BNE PC+0c",
	'0d': "BNE PC+0d",
	'0e': "BNE PC+0e",
	'0f': "BNE PC+0f",
	'10': "BNE PC+10",
	'11': "BNE PC+11",
	'12': "BNE PC+12",
	'13': "BNE PC+13",
	'14': "BNE PC+14",
	'15': "BNE PC+15",
	'16': "BNE PC+16",
	'17': "BNE PC+17",
	'18': "BNE PC+18",
	'19': "BNE PC+19",
	'1a': "BNE PC+1a",
	'1b': "BNE PC+1b",
	'1c': "BNE PC+1c",
	'1d': "BNE PC+1d",
	'1e': "BNE PC+1e",
	'1f': "BNE PC+1f",
	'20': "BEQ PC+00",
	'21': "BEQ PC+01",
	'22': "BEQ PC+02",
	'23': "BEQ PC+03",
	'24': "BEQ PC+04",
	'25': "BEQ PC+05",
	'26': "BEQ PC+06",
	'27': "BEQ PC+07",
	'28': "BEQ PC+08",
	'29': "BEQ PC+09",
	'2a': "BEQ PC+0a",
	'2b': "BEQ PC+0b",
	'2c': "BEQ PC+0c",
	'2d': "BEQ PC+0d",
	'2e': "BEQ PC+0e",
	'2f': "BEQ PC+0f",
	'30': "BEQ PC+10",
	'31': "BEQ PC+11",
	'32': "BEQ PC+12",
	'33': "BEQ PC+13",
	'34': "BEQ PC+14",
	'35': "BEQ PC+15",
	'36': "BEQ PC+16",
	'37': "BEQ PC+17",
	'38': "BEQ PC+18",
	'39': "BEQ PC+19",
	'3a': "BEQ PC+1a",
	'3b': "BEQ PC+1b",
	'3c': "BEQ PC+1c",
	'3d': "BEQ PC+1d",
	'3e': "BEQ PC+1e",
	'3f': "BEQ PC+1f",
	'40': "BCC PC+00",
	'41': "BCC PC+01",
	'42': "BCC PC+02",
	'43': "BCC PC+03",
	'44': "BCC PC+04",
	'45': "BCC PC+05",
	'46': "BCC PC+06",
	'47': "BCC PC+07",
	'48': "BCC PC+08",
	'49': "BCC PC+09",
	'4a': "BCC PC+0a",
	'4b': "BCC PC+0b",
	'4c': "BCC PC+0c",
	'4d': "BCC PC+0d",
	'4e': "BCC PC+0e",
	'4f': "BCC PC+0f",
	'50': "BCC PC+10",
	'51': "BCC PC+11",
	'52': "BCC PC+12",
	'53': "BCC PC+13",
	'54': "BCC PC+14",
	'55': "BCC PC+15",
	'56': "BCC PC+16",
	'57': "BCC PC+17",
	'58': "BCC PC+18",
	'59': "BCC PC+19",
	'5a': "BCC PC+1a",
	'5b': "BCC PC+1b",
	'5c': "BCC PC+1c",
	'5d': "BCC PC+1d",
	'5e': "BCC PC+1e",
	'5f': "BCC PC+1f",
	'60': "BCS PC+00",
	'61': "BCS PC+01",
	'62': "BCS PC+02",
	'63': "BCS PC+03",
	'64': "BCS PC+04",
	'65': "BCS PC+05",
	'66': "BCS PC+06",
	'67': "BCS PC+07",
	'68': "BCS PC+08",
	'69': "BCS PC+09",
	'6a': "BCS PC+0a",
	'6b': "BCS PC+0b",
	'6c': "BCS PC+0c",
	'6d': "BCS PC+0d",
	'6e': "BCS PC+0e",
	'6f': "BCS PC+0f",
	'70': "BCS PC+10",
	'71': "BCS PC+11",
	'72': "BCS PC+12",
	'73': "BCS PC+13",
	'74': "BCS PC+14",
	'75': "BCS PC+15",
	'76': "BCS PC+16",
	'77': "BCS PC+17",
	'78': "BCS PC+18",
	'79': "BCS PC+19",
	'7a': "BCS PC+1a",
	'7b': "BCS PC+1b",
	'7c': "BCS PC+1c",
	'7d': "BCS PC+1d",
	'7e': "BCS PC+1e",
	'7f': "BCS PC+1f",
	'80': "JSR 0x0000 + ",
	'81': "JSR 0x0100 + ",
	'82': "JSR 0x0200 + ",
	'83': "JSR 0x0300 + ",
	'84': "JSR 0x0400 + ",
	'85': "JSR 0x0500 + ",
	'86': "JSR 0x0600 + ",
	'87': "JSR 0x0700 + ",
	'88': "JSR 0x0800 + ",
	'89': "JSR 0x0900 + ",
	'8a': "JSR 0x0a00 + ",
	'8b': "JSR 0x0b00 + ",
	'8c': "JSR 0x0c00 + ",
	'8d': "JSR 0x0d00 + ",
	'8e': "JSR 0x0e00 + ",
	'8f': "JSR 0x0f00 + ",
	'90': "JMP 0x0000 + ",
	'91': "JMP 0x0100 + ",
	'92': "JMP 0x0200 + ",
	'93': "JMP 0x0300 + ",
	'94': "JMP 0x0400 + ",
	'95': "JMP 0x0500 + ",
	'96': "JMP 0x0600 + ",
	'97': "JMP 0x0700 + ",
	'98': "JMP 0x0800 + ",
	'99': "JMP 0x0900 + ",
	'9a': "JMP 0x0a00 + ",
	'9b': "JMP 0x0b00 + ",
	'9c': "JMP 0x0c00 + ",
	'9d': "JMP 0x0d00 + ",
	'9e': "JMP 0x0e00 + ",
	'9f': "JMP 0x0f00 + ",
	'a8': "INC $80",
	'a9': "INC $81",
	'aa': "INC $82",
	'ab': "INC $83",
	'ac': "LDA $80",
	'ad': "LDA $81",
	'ae': "LDA $82",
	'af': "LDA $83",
	'b0': "MVI + ",
	'b2': "RTI",
	'b3': "RTS",
	'b4': "COMA",
	'b5': "ROLA",
	'b8': "DEC $80",
	'b9': "DEC $81",
	'ba': "DEC $82",
	'bb': "DEC $83",
	'bc': "STA $80",
	'bd': "STA $81",
	'be': "STA $82",
	'bf': "STA $83",
	'c0': "BRCLR bit 0 + ",
	'c1': "BRCLR bit 1 + ",
	'c2': "BRCLR bit 2 + ",
	'c3': "BRCLR bit 3 + ",
	'c4': "BRCLR bit 4 + ",
	'c5': "BRCLR bit 5 + ",
	'c6': "BRCLR bit 6 + ",
	'c7': "BRCLR bit 7 + ",
	'c8': "BRSET bit 0 + ",
	'c9': "BRSET bit 1 + ",
	'ca': "BRSET bit 2 + ",
	'cb': "BRSET bit 3 + ",
	'cc': "BRSET bit 4 + ",
	'cd': "BRSET bit 5 + ",
	'ce': "BRSET bit 6 + ",
	'cf': "BRSET bit 7 + ",
	'd0': "BCLR bit 0 + ",
	'd1': "BCLR bit 1 + ",
	'd2': "BCLR bit 2 + ",
	'd3': "BCLR bit 3 + ",
	'd4': "BCLR bit 4 + ",
	'd5': "BCLR bit 5 + ",
	'd6': "BCLR bit 6 + ",
	'd7': "BCLR bit 7 + ",
	'd8': "BSET bit 0 + ",
	'd9': "BSET bit 1 + ",
	'da': "BSET bit 2 + ",
	'db': "BSET bit 3 + ",
	'dc': "BSET bit 4 + ",
	'dd': "BSET bit 5 + ",
	'de': "BSET bit 6 + ",
	'df': "BSET bit 7 + ",
	'e0': "LDA XP",
	'e1': "STA XP",
	'e2': "ADD XP",
	'e3': "SUB XP",
	'e4': "CMP XP",
	'e5': "AND XP",
	'e6': "INC XP",
	'e7': "DEC XP",
	'e8': "LDA + ",
	'ea': "ADD + ",
	'eb': "SUB + ",
	'ec': "CMP + ",
	'ed': "AND + ",
	'f0': "LDA YP",
	'f1': "STA YP",
	'f2': "ADD YP",
	'f3': "SUB YP",
	'f4': "CMP YP",
	'f5': "AND YP",
	'f6': "INC Y",
	'f7': "DEC Y",
	'f8': "LDA + ",
	'f9': "STA + ",
	'fa': "ADD + ",
	'fb': "SUB + ",
	'fc': "CMP + ",
	'fd': "AND + ",
	'fe': "INC + ",
	'ff': "DEC + ",
}

size = {
	'00': 1,
	'01': 1,
	'02': 1,
	'03': 1,
	'04': 1,
	'05': 1,
	'06': 1,
	'07': 1,
	'08': 1,
	'09': 1,
	'0a': 1,
	'0b': 1,
	'0c': 1,
	'0d': 1,
	'0e': 1,
	'0f': 1,
	'10': 1,
	'11': 1,
	'12': 1,
	'13': 1,
	'14': 1,
	'15': 1,
	'16': 1,
	'17': 1,
	'18': 1,
	'19': 1,
	'1a': 1,
	'1b': 1,
	'1c': 1,
	'1d': 1,
	'1e': 1,
	'1f': 1,
	'20': 1,
	'21': 1,
	'22': 1,
	'23': 1,
	'24': 1,
	'25': 1,
	'26': 1,
	'27': 1,
	'28': 1,
	'29': 1,
	'2a': 1,
	'2b': 1,
	'2c': 1,
	'2d': 1,
	'2e': 1,
	'2f': 1,
	'30': 1,
	'31': 1,
	'32': 1,
	'33': 1,
	'34': 1,
	'35': 1,
	'36': 1,
	'37': 1,
	'38': 1,
	'39': 1,
	'3a': 1,
	'3b': 1,
	'3c': 1,
	'3d': 1,
	'3e': 1,
	'3f': 1,
	'40': 1,
	'41': 1,
	'42': 1,
	'43': 1,
	'44': 1,
	'45': 1,
	'46': 1,
	'47': 1,
	'48': 1,
	'49': 1,
	'4a': 1,
	'4b': 1,
	'4c': 1,
	'4d': 1,
	'4e': 1,
	'4f': 1,
	'50': 1,
	'51': 1,
	'52': 1,
	'53': 1,
	'54': 1,
	'55': 1,
	'56': 1,
	'57': 1,
	'58': 1,
	'59': 1,
	'5a': 1,
	'5b': 1,
	'5c': 1,
	'5d': 1,
	'5e': 1,
	'5f': 1,
	'60': 1,
	'61': 1,
	'62': 1,
	'63': 1,
	'64': 1,
	'65': 1,
	'66': 1,
	'67': 1,
	'68': 1,
	'69': 1,
	'6a': 1,
	'6b': 1,
	'6c': 1,
	'6d': 1,
	'6e': 1,
	'6f': 1,
	'70': 1,
	'71': 1,
	'72': 1,
	'73': 1,
	'74': 1,
	'75': 1,
	'76': 1,
	'77': 1,
	'78': 1,
	'79': 1,
	'7a': 1,
	'7b': 1,
	'7c': 1,
	'7d': 1,
	'7e': 1,
	'7f': 1,
	'80': 2,
	'81': 2,
	'82': 2,
	'83': 2,
	'84': 2,
	'85': 2,
	'86': 2,
	'87': 2,
	'88': 2,
	'89': 2,
	'8a': 2,
	'8b': 2,
	'8c': 2,
	'8d': 2,
	'8e': 2,
	'8f': 2,
	'90': 2,
	'91': 2,
	'92': 2,
	'93': 2,
	'94': 2,
	'95': 2,
	'96': 2,
	'97': 2,
	'98': 2,
	'99': 2,
	'9a': 2,
	'9b': 2,
	'9c': 2,
	'9d': 2,
	'9e': 2,
	'9f': 2,
	'a8': 1,
	'a9': 1,
	'aa': 1,
	'ab': 1,
	'ac': 1,
	'ad': 1,
	'ae': 1,
	'af': 1,
	'b0': 3,
	'b2': 1,
	'b3': 1,
	'b4': 1,
	'b5': 1,
	'c0': 3,
	'c1': 3,
	'c2': 3,
	'c3': 3,
	'c4': 3,
	'c5': 3,
	'c6': 3,
	'c7': 3,
	'c8': 3,
	'c9': 3,
	'ca': 3,
	'cb': 3,
	'cc': 3,
	'cd': 3,
	'ce': 3,
	'cf': 3,
	'd0': 2,
	'd1': 2,
	'd2': 2,
	'd3': 2,
	'd4': 2,
	'd5': 2,
	'd6': 2,
	'd7': 2,
	'd8': 2,
	'd9': 2,
	'da': 2,
	'db': 2,
	'dc': 2,
	'dd': 2,
	'de': 2,
	'df': 2,
	'e0': 1,
	'e1': 1,
	'e2': 1,
	'e3': 1,
	'e4': 1,
	'e5': 1,
	'e6': 1,
	'e7': 1,
	'e8': 2,
	'ea': 2,
	'eb': 2,
	'ec': 2,
	'ed': 2,
	'f0': 1,
	'f1': 1,
	'f2': 1,
	'f3': 1,
	'f4': 1,
	'f5': 1,
	'f6': 1,
	'f7': 1,
	'f8': 2,
	'f9': 2,
	'fa': 2,
	'fb': 2,
	'fc': 2,
	'fd': 2,
	'fe': 2,
	'ff': 2,
}



f = open('vcp200_program_rom.bin','rb')
f2 = open('disassembly.txt','wb')
# i is the unmolested address byte
i = 0
while (i < 0x1000):
	i = i + 1
# a is the unmolested binary byte
	a=f.read(1)
# d is for printing the byte
	d=binascii.hexlify(a)
	#print d
	f2.write("address: ")
	f2.write("0x%03X" % (i))
	f2.write(" = data: %s" % (d))
	f2.write(" = opcode: ")
	f2.write(switcher.get(d, "Invalid opcode"))
	if size.get(d, 1)>1:
		#print i
		i = i + 1
		#print i
		b=f.read(1)
		e=binascii.hexlify(b)
		f2.write("0x%s" % (e))
	if size.get(d, 1)>2:
		#print i
		i = i + 1
		#print i
		c=f.read(1)
		g=binascii.hexlify(c)
		f2.write(" + ")
		f2.write("0x%s" % (g))
	f2.write("\n")
f.close()
f2.close()


